1)  forEach() method in Iterable interface


	package com.journaldev.java8.foreach;
	
				//traversing using Iterator
			Iterator<Integer> it = myList.iterator();
			while(it.hasNext()){
			Integer i = it.next();
			System.out.println("Iterator Value::"+i);
		}
		
		//traversing through forEach method of Iterable with anonymous class
		myList.forEach(new Consumer<Integer>() {

			public void accept(Integer t) {
				System.out.println("forEach anonymous class Value::"+t);
			}

		});
		
		
2) default and static methods in Interfaces
	We can use default and static keyword to create interfaces with method implementation. 
	
3) Functional Interfaces and Lambda Expressions
		*
			Runnable r = new Runnable(){
			@Override
			public void run() {
				System.out.println("My Runnable");
			}};
			
		-> 	Runnable r1 = () -> {
			System.out.println("My Runnable");
		};
		

4) Java Stream API for Bulk Data Operations on Collections
		*A new java.util.stream has been added in Java 8 to perform filter/map/reduce like operations with the collection
		*Collection interface has been extended with stream() and parallelStream() default methods to get the Stream for sequential and parallel execution.
		
		
		
5) Java Time API


6) Collection API improvements
	We have already seen forEach() method and Stream API for collections. Some new methods added in Collection API are:
		*Iterator default method forEachRemaining(Consumer action) to perform the given action for each remaining element 
			until all elements have been processed or the action throws an exception.	
		
		*Collection default method removeIf(Predicate filter) to remove all of the elements of this collection that satisfy
			the given predicate.
		
		*Collection spliterator() method returning Spliterator instance that can be used to traverse elements sequentially 
			or parallel.
		
		*Map replaceAll(), compute(), merge() methods.
		
		*Performance Improvement for HashMap class with Key Collisions
		
7) Concurrency API improvements

	Some important concurrent API enhancements are:
		
		*ConcurrentHashMap compute(), forEach(), forEachEntry(), forEachKey(), forEachValue(), merge(), reduce() and search() methods.
		
		*CompletableFuture that may be explicitly completed (setting its value and status).
		
		*Executors newWorkStealingPool() method to create a work-stealing thread pool using all available processors as its target parallelism level.

8)Java IO improvements
	
		*Files.list(Path dir) that returns a lazily populated Stream, the elements of which are the entries in the directory.
		*Files.lines(Path path) that reads all lines from a file as a Stream
		*Files.find() that returns a Stream that is lazily populated with Path by searching for files in a file tree rooted at a given starting file.
		*BufferedReader.lines() that return a Stream, the elements of which are lines read from this BufferedReader.
		


Miscellaneous Java 8 Core API improvements

	1> ThreadLocal static method withInitial(Supplier supplier) to create instances easily.
	2> The Comparator interface has been extended with a lot of default and static methods for natural ordering, reverse order, etc.
	3> min(), max() and sum() methods in Integer, Long and Double wrapper classes.
	4>logicalAnd(), logicalOr() and logicalXor() methods in Boolean class.
	5>ZipFile.stream() method to get an ordered Stream over the ZIP file entries. Entries appear in the Stream in the order they appear in the central directory of the ZIP file.
	6>Several utility methods in Math class.
	7>jjs command is added to invoke Nashorn Engine.
	8>jdeps command is added to analyze class files
	9>JDBC-ODBC Bridge has been removed.
	10>PermGen memory space has been removed
